import math

""" Node class
"""

class Node:
    def __init__(self, data = None):
        self.data = data
        self.left = None
        self.right = None

""" BST class with insert and display methods. display pretty prints the tree
"""

class BinaryTree:
    def __init__(self):
        self.root = None

    def insert(self, data):
        if self.root is None:
            self.root = Node(data)
        else:
            self._insert(data, self.root)

    def _insert(self, data, cur_node):
        if data < cur_node.data:
            if cur_node.left is None:
                cur_node.left = Node(data)
            else:
                self._insert(data, cur_node.left)
        elif data > cur_node.data:
            if cur_node.right is None:
                cur_node.right = Node(data)
            else:
                self._insert(data, cur_node.right)
        else:
            print("Value already present in tree")

    def display(self, cur_node):
        lines, _, _, _ = self._display(cur_node)
        for line in lines:
            print(line)

    def _display(self, cur_node):
        
        if cur_node.right is None and cur_node.left is None:
            line = '%s' % cur_node.data
            width = len(line)
            height = 1
            middle = width // 2
            return [line], width, height, middle

        if cur_node.right is None:
            lines, n, p, x = self._display(cur_node.left)
            s = '%s' % cur_node.data
            u = len(s)
            first_line = (x + 1) * ' ' + (n - x - 1) * '_' + s
            second_line = x * ' ' + '/' + (n - x - 1 + u) * ' '
            shifted_lines = [line + u * ' ' for line in lines]
            return [first_line, second_line] + shifted_lines, n + u, p + 2, n + u // 2
        
        if cur_node.left is None:
            lines, n, p, x = self._display(cur_node.right)
            s = '%s' % cur_node.data
            u = len(s)
            first_line = s + x * '_' + (n - x) * ' '
            second_line = (u + x) * ' ' + '\\' + (n - x - 1) * ' '
            shifted_lines = [u * ' ' + line for line in lines]
            return [first_line, second_line] + shifted_lines, n + u, p + 2, u // 2

        left, n, p, x = self._display(cur_node.left)
        right, m, q, y = self._display(cur_node.right)
        s = '%s' % cur_node.data
        u = len(s)
        first_line = (x + 1) * ' ' + (n - x - 1) * '_' + s + y * '_' + (m - y) * ' '
        second_line = x * ' ' + '/' + (n - x - 1 + u + y) * ' ' + '\\' + (m - y - 1) * ' '
        if p < q:
            left += [n * ' '] * (q - p)
        elif q < p:
            right += [m * ' '] * (p - q)
        zipped_lines = zip(left, right)
        lines = [first_line, second_line] + [a + u * ' ' + b for a, b in zipped_lines]
        return lines, n + m + u, max(p, q) + 2, n + u // 2
    
    #start of STD_2

    def find_i(self, target):                           #iterative method to find a target value in the binary tree
        cur_node = self.root
        while cur_node is not None:
            if cur_node.data == target:                 #if the current node is equal to the target, return True
                return True
            elif cur_node.data > target:                #if the target is smaller than the current node, move to the left child
                cur_node = cur_node.left
            else:                                       #if the target is larger than the current node, move to the right child
                cur_node = cur_node.right
        return False                                    #if the target is not found in the tree, return False

    def find_r(self, target):                           #recursive method to find a target value in the binary tree
        if self.root:                                   #check if the tree is not empty
            return self._find_r(target, self.root)
        else:                                           #if the tree is empty, return None
            return None

    def _find_r(self, target, cur_node):                #function for recursive find
        if cur_node is None:                            #if the current node is None, return None (target not found)
            return None
        if target == cur_node.data:                     #if the target is found at the current node, return True
            return True
        elif target < cur_node.data:                    #if the target is smaller than the current node, search in the left subtree
            return self._find_r(target, cur_node.left)
        else:                                           #if the target is larger than the current node's data, search in the right subtree
            return self._find_r(target, cur_node.right)
        
    #end of STD_2

    #start of ADV_1
        
    def remove(self, target):
        if self.root is None:                                       #checks if the tree is empty, return false if the tree is empty                         
            return False
        
        elif self.root.data == target:                              #if the tree root is the target
            if self.root.left is None and self.root.right is None:  #if root has no children, set the root to None
                self.root = None
            elif self.root.left and self.root.right is None:        #if root has only a left child, change the left child to be the new root
                self.root = self.root.left
            elif self.root.left is None and self.root.right:        #if root has only a right child, change the right child to be the new root
                self.root = self.root.right
            elif self.root.left and self.root.right:                #if root has both left and right children, call the function to handle the case
                self._if_left_and_right(self.root)
        
        parent = None                                               #initialize parent node
        node = self.root                                            #start from the root of the tree

        while node and node.data != target:                         #search for the node with the target value
            parent = node
            if target < node.data:                                  #if the target value is smaler than the current node, move to the left child
                node = node.left
            elif target > node.data:                                #if the target value is greater than the current node, move to the right child
                node = node.right

        if node is None or node.data != target:                     #case 1, the target is not found, return False
            return False
        
        elif node.left is None and node.right is None:              #case 2, the target has no children
            if target < parent.data:                                #set parent's left child to None
                parent.left = None
            else:                                                   #else, set parent's right child to None
                parent.right = None
            return True                                             #return True to for successful removal
        
        elif node.left and node.right is None:                      #case 3, the target node has only a left child
            if target < parent.data:
                parent.left = node.left                             #set parent's left child to node's left child
            else:
                parent.right = node.left                            #else, set parent's right child to node's left child
            return True                                             #return True to for successful removal

        elif node.left is None and node.right:                      #case 4, the target node has only a right child
                if target < parent.data:
                    parent.left = node.right                        #set parent's left child to node's right child
                else:
                    parent.right = node.right                       #set parent's right child to node's right child
                return True                                         #return True for successful removal
        
        else:                                                       #case 5, the target has left and right children, call the function to handle the case
            self._if_left_and_right(node)

    def _if_left_and_right(self, node):                             #function to remove a node which has both left and right children
        delNodeParent = node                                        #store the parent of the current node
        delNode = node.right                                        #get the right child of the current node

        while delNode.left:                                         #find the leftmost child in the right subtree of the current node
            delNodeParent = delNode
            delNode = delNode.left

        node.data = delNode.data                                    #replace the value of the current node with the value of the leftmost child

        if delNode.right:                                           #if case when the leftmost child has a right child
            if delNodeParent.data > delNode.data:                   #update the parent's left/right child pointer
                delNodeParent.left = delNode.right
            else:
                delNodeParent.right = delNode.right
        else:
            if delNode.data < delNodeParent.data:                   #if the leftmost child has no right child, remove it from the tree
                delNodeParent.left = None
            else:
                delNodeParent.right = None

    #end of ADV_1


#example calls, which construct and display the tree       
bst = BinaryTree()
bst.insert(4)
bst.insert(2)
bst.insert(6)
bst.insert(1)
bst.insert(3)
bst.insert(5)
bst.insert(7)
bst.insert(8)
bst.insert(9)
bst.insert(10)
bst.insert(11)
bst.insert(12)
bst.insert(13)
bst.insert(14)
bst.insert(15)
bst.insert(100)
bst.insert(200)

bst.display(bst.root)

#example of removing nodes from the tree
bst.remove(6)
bst.remove(3)
bst.remove(10)

#displays the tree after removal
print("Tree after removal:")
bst.display(bst.root)
